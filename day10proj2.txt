README.md
# 🚀 BugAnalyticsAPI – Java Spring Boot (Day10 Project)

[![Java](https://img.shields.io/badge/Java-17-blue)](https://www.oracle.com/java/)
[![Spring Boot](https://img.shields.io/badge/Spring%20Boot-3.x-brightgreen)](https://spring.io/projects/spring-boot)
[![PostgreSQL](https://img.shields.io/badge/PostgreSQL-17.x-blue)](https://www.postgresql.org/)

A **Spring Boot Analytics API** that provides insightful bug-related statistics such as:
- 🟢 **Bug count by project**
- 🟢 **Bug count by status**
- 🟢 **Bug count by priority**
- 🟢 **Top 3 bug-heavy projects**

---

## 📌 **Project Structure**
```
Directory structure:
└── adrin-bershik-c-j-java-day10-proj2/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── request.http
    ├── src/
    │   ├── main/
    │   │   ├── java/
    │   │   │   └── com/
    │   │   │       └── example/
    │   │   │           └── day10proj2/
    │   │   │               ├── Day10proj2Application.java
    │   │   │               ├── controller/
    │   │   │               │   └── AnalyticsController.java
    │   │   │               ├── dto/
    │   │   │               │   ├── PriorityCountDTO.java
    │   │   │               │   ├── ProjectBugCountDTO.java
    │   │   │               │   └── StatusCountDTO.java
    │   │   │               ├── entity/
    │   │   │               │   ├── Bug.java
    │   │   │               │   └── Project.java
    │   │   │               ├── repository/
    │   │   │               │   └── BugRepository.java
    │   │   │               └── service/
    │   │   │                   ├── AnalyticsService.java
    │   │   │                   └── AnalyticsServiceImpl.java
    │   │   └── resources/
    │   │       └── application.properties
    │   └── test/
    │       └── java/
    │           └── com/
    │               └── example/
    │                   └── day10proj2/
    │                       └── Day10proj2ApplicationTests.java
    └── .mvn/
        └── wrapper/
            └── maven-wrapper.properties

```

---

## ⚙️ **Tech Stack**
- **Java 17**
- **Spring Boot 3.x**
- **Spring Data JPA**
- **PostgreSQL 17.x**
- **REST Client (VS Code)** for testing APIs

---

## 🔥 **Features Implemented**
✅ RESTful endpoints for analytics  
✅ DTO projection with JPQL (`SELECT NEW`)  
✅ Aggregation using `GROUP BY` and `COUNT`  
✅ Clean layered architecture (Controller → Service → Repository → Entity)  

---

## 🗄️ **Database Configuration**
The database settings are in `application.properties`:

```properties
spring.datasource.url=jdbc:postgresql://localhost:5432/day10proj2
spring.datasource.username=postgres
spring.datasource.password=Adrin@123
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


AnalyticsController.java
package com.example.day10proj2.controller;

import com.example.day10proj2.dto.ProjectBugCountDTO;
import com.example.day10proj2.dto.StatusCountDTO;
import com.example.day10proj2.dto.PriorityCountDTO;
import com.example.day10proj2.service.AnalyticsService;

import lombok.AllArgsConstructor;

import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/analytics")
@AllArgsConstructor
public class AnalyticsController {

    private final AnalyticsService analyticsService;

    @GetMapping("/bugs-by-project")
    public List<ProjectBugCountDTO> bugsByProject() {
        return analyticsService.getBugsByProject();
    }

    @GetMapping("/bugs-by-status")
    public List<StatusCountDTO> bugsByStatus() {
        return analyticsService.getBugsByStatus();
    }

    @GetMapping("/bugs-by-priority")
    public List<PriorityCountDTO> bugsByPriority() {
        return analyticsService.getBugsByPriority();
    }

    @GetMapping("/top-projects")
    public List<ProjectBugCountDTO> topProjects() {
        return analyticsService.getTopProjects();
    }
}

PriorityCountDTO.java
package com.example.day10proj2.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class PriorityCountDTO {
    
    private String priority;
    private Long count;

}

ProjectBugCountDTO.java
package com.example.day10proj2.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class ProjectBugCountDTO {

    private String projectName;
    private Long bugCount;

}

StatusCountDTO.java
package com.example.day10proj2.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public class StatusCountDTO {

    private String status;
    private Long count;

}


Bug.java
package com.example.day10proj2.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
public class Bug {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String status;
    private String priority;

    @ManyToOne
    @JoinColumn(name = "project_id")
    private Project project;

}

Project.java
package com.example.day10proj2.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.util.List;

@Entity
@Getter
@Setter
public class Project {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @OneToMany(mappedBy = "project")
    private List<Bug> bugs;

}

BugRepository.java
package com.example.day10proj2.repository;

import com.example.day10proj2.dto.ProjectBugCountDTO;
import com.example.day10proj2.dto.StatusCountDTO;
import com.example.day10proj2.dto.PriorityCountDTO;
import com.example.day10proj2.entity.Bug;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

public interface BugRepository extends JpaRepository<Bug, Long> {

    @Query("SELECT new com.example.day10proj2.dto.ProjectBugCountDTO(b.project.name, COUNT(b)) " +
            "FROM Bug b GROUP BY b.project.name")
    List<ProjectBugCountDTO> countBugsByProject();

    @Query("SELECT new com.example.day10proj2.dto.StatusCountDTO(b.status, COUNT(b)) " +
            "FROM Bug b GROUP BY b.status")
    List<StatusCountDTO> countBugsByStatus();

    @Query("SELECT new com.example.day10proj2.dto.PriorityCountDTO(b.priority, COUNT(b)) " +
            "FROM Bug b GROUP BY b.priority")
    List<PriorityCountDTO> countBugsByPriority();

    @Query("SELECT new com.example.day10proj2.dto.ProjectBugCountDTO(b.project.name, COUNT(b)) " +
            "FROM Bug b GROUP BY b.project.name ORDER BY COUNT(b) DESC")
    List<ProjectBugCountDTO> findTopProjects();
}

AnalyticsService.java
package com.example.day10proj2.service;

import com.example.day10proj2.dto.ProjectBugCountDTO;
import com.example.day10proj2.dto.StatusCountDTO;
import com.example.day10proj2.dto.PriorityCountDTO;

import java.util.List;

public interface AnalyticsService {
    List<ProjectBugCountDTO> getBugsByProject();

    List<StatusCountDTO> getBugsByStatus();

    List<PriorityCountDTO> getBugsByPriority();

    List<ProjectBugCountDTO> getTopProjects();
}

AnalyticsServiceImpl.java
package com.example.day10proj2.service;

import com.example.day10proj2.dto.ProjectBugCountDTO;
import com.example.day10proj2.dto.StatusCountDTO;
import com.example.day10proj2.dto.PriorityCountDTO;
import com.example.day10proj2.repository.BugRepository;

import lombok.AllArgsConstructor;

import org.springframework.stereotype.Service;

import java.util.List;

@Service
@AllArgsConstructor
public class AnalyticsServiceImpl implements AnalyticsService {

    private final BugRepository bugRepository;

    @Override
    public List<ProjectBugCountDTO> getBugsByProject() {
        return bugRepository.countBugsByProject();
    }

    @Override
    public List<StatusCountDTO> getBugsByStatus() {
        return bugRepository.countBugsByStatus();
    }

    @Override
    public List<PriorityCountDTO> getBugsByPriority() {
        return bugRepository.countBugsByPriority();
    }

    @Override
    public List<ProjectBugCountDTO> getTopProjects() {
        return bugRepository.findTopProjects().stream().limit(3).toList();
    }
}

Day10proj2Application.java
package com.example.day10proj2;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Day10proj2Application {

	public static void main(String[] args) {
		SpringApplication.run(Day10proj2Application.class, args);
	}

}

application.properties
spring.application.name=day10proj2

# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/day10proj2
spring.datasource.username=postgres
spring.datasource.password=Adrin@123
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA / Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

